<#
.SYNOPSIS
    Wrapper script to construct and run Packer build command for Windows 11 on vSphere or Azure.

.DESCRIPTION
    This script builds the Packer command line with -var-file flags using common, platform, and OS HCL files, avoiding duplicates. It supports vSphere and Azure, with dummy files referenced in HCL. Logs to C:\temp\scripts\logs\build.log. Uses latest PowerShell features like ForEach-Object -Parallel if needed for scalability.

.PARAMETER Platform
    The platform to build for (vsphere or azure). Default vsphere.

.PARAMETER OS
    The OS to build for (win11, winsvr2022, ubuntu, rhel). Default win11.

.EXAMPLE
    .\Build-Template.ps1 -Platform "vsphere" -OS "win11"

.NOTES
    Author: Marinus van Deventer
    Version: 1.1
    Date: August 08, 2025
    Changes: Added OS param for scalability, family detection, updated VarFiles/TemplateFile to include OS, added OS validation/logging.
    Reference: Packer build[](https://developer.hashicorp.com/packer/docs/commands/build)
    Reference: Test-Path[](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.management/test-path?view=powershell-7.4)
    Reference: Parameters[](https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_parameters?view=powershell-7.4)
    Working Directory: C:\temp\scripts
    Logs: C:\temp\scripts\logs\build.log
    To sign the script: Set-AuthenticodeSignature -FilePath .\Build-Template.ps1 -Certificate (Get-ChildItem Cert:\CurrentUser\My -CodeSigningCert)
#>

param (
    [ValidateSet("vsphere", "azure")]
    [string]$Platform = "vsphere",

    [ValidateSet("win11", "winsvr2022", "ubuntu", "rhel")]
    [string]$OS = "win11"
)

#region Initial Setup
$WorkingDir = "C:\temp\scripts"
$LogDir = "$WorkingDir\logs"
$LogFile = "$LogDir\build.log"

# Create working and log directories if not exist
if (-not (Test-Path $WorkingDir -PathType Container)) {
    New-Item -Path $WorkingDir -ItemType Directory -Force | Out-Null
}
if (-not (Test-Path $LogDir -PathType Container)) {
    New-Item -Path $LogDir -ItemType Directory -Force | Out-Null
}

# Function for logging
function Write-Log {
    param (
        [string]$Message,
        [string]$Level = "INFO"
    )
    $Timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $LogEntry = "[$Timestamp] [$Level] $Message"
    Write-Information $LogEntry
    Add-Content -Path $LogFile -Value $LogEntry
}

Write-Log "Script execution started with Platform: $Platform and OS: $OS"
#endregion

#region Validate Inputs and Files
try {
    $RootPath = (Get-Location).Path  # Assume current dir is root; adjust if needed

    # Determine OS family
    if ($OS -match 'win') {
        $Family = "windows"
    } else {
        $Family = "linux"
    }
    Write-Log "Detected OS family: $Family"

    # Define variable files (common first, then platform, then OS - no duplicates)
    $VarFiles = @(
        "$RootPath\variables\global.pkrvars.hcl",
        "$RootPath\variables\platforms\$Platform.pkrvars.hcl",
        "$RootPath\variables\os\$OS.pkrvars.hcl"
    )

    # Validate variable files exist
    foreach ($File in $VarFiles) {
        if (-not (Test-Path $File -PathType Leaf)) {
            Write-Log "Missing variable file: $File" "ERROR"
            throw "Variable file not found: $File"
        }
    }

    # Define template file based on family and platform
    $TemplateFile = "$RootPath\templates\$Family\$Platform-base.pkr.hcl"
    if (-not (Test-Path $TemplateFile -PathType Leaf)) {
        Write-Log "Missing template file: $TemplateFile" "ERROR"
        throw "Template file not found: $TemplateFile"
    }

    # Load .env for sensitive vars if exists
    if (Test-Path "$RootPath\.env" -PathType Leaf) {
        $EnvContent = Get-Content "$RootPath\.env" -Raw | ConvertFrom-StringData
        $EnvContent.Keys | Where-Object { $_ -match '^PKR_VAR_' } | ForEach-Object {
            $env:$_ = $EnvContent[$_]
        }
        Write-Log "Loaded sensitive vars from .env"
    } else {
        Write-Log ".env file not found; using defaults or prompts if needed" "WARNING"
    }
} catch {
    Write-Log "Validation error: $($_.Exception.Message)" "ERROR"
    throw "Script validation failed."
}
#endregion

#region Construct and Run Packer Command
try {
    # Build the packer command line
    $VarFileFlags = $VarFiles | ForEach-Object { "-var-file=`"$_`"" }
    $Command = "packer build $VarFileFlags `"$TemplateFile`""

    Write-Log "Constructed Packer command: $Command"

    # Run the command
    Invoke-Expression $Command

    Write-Log "Packer build completed"
} catch {
    Write-Log "Packer build error: $($_.Exception.Message)" "ERROR"
    throw "Packer build failed."
} finally {
    Write-Log "Script execution completed"
}
#endregion
